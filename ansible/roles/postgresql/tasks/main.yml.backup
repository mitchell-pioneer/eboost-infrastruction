---
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  become: yes

- name: Install PostgreSQL and dependencies
  apt:
    name:
      - postgresql
      - postgresql-contrib
      - python3-psycopg2
    state: present
  become: yes

- name: Check if PostgreSQL cluster exists
  stat:
    path: /var/lib/postgresql/14/main
  register: pg_cluster_exists
  become: yes

- name: Initialize PostgreSQL cluster if it doesn't exist
  shell: |
    pg_createcluster 14 main
  become: yes
  when: not pg_cluster_exists.stat.exists
  register: cluster_created

- name: Restart PostgreSQL after cluster creation
  systemd:
    name: postgresql
    state: restarted
  become: yes
  when: cluster_created.changed

- name: Check PostgreSQL service name
  shell: systemctl list-unit-files | grep postgresql | head -1 | awk '{print $1}'
  register: postgresql_service_name
  become: yes

- name: Start and enable PostgreSQL service
  systemd:
    name: "{{ postgresql_service_name.stdout }}"
    state: started
    enabled: yes
  become: yes
  when: postgresql_service_name.stdout != ""

- name: Start and enable PostgreSQL service (fallback)
  systemd:
    name: postgresql
    state: started
    enabled: yes
  become: yes
  when: postgresql_service_name.stdout == ""

- name: Wait for PostgreSQL to be ready
  wait_for:
    port: 5432
    timeout: 30

- name: Create database user with direct SQL
  shell: |
    sudo -u postgres psql -c "DO \$\$
    BEGIN
      IF NOT EXISTS (SELECT FROM pg_catalog.pg_user WHERE usename = '{{ db_user }}') THEN
        CREATE USER {{ db_user }} WITH PASSWORD '{{ db_password }}';
      END IF;
    END
    \$\$;"
  become: yes
  register: user_creation_result

- name: Create database with direct SQL
  shell: |
    sudo -u postgres psql -c "SELECT 1 FROM pg_database WHERE datname = '{{ db_name }}'" | grep -q 1 || sudo -u postgres createdb {{ db_name }}
  become: yes
  register: db_creation_result

- name: Grant database privileges with direct SQL
  shell: |
    sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE {{ db_name }} TO {{ db_user }};"
  become: yes

- name: Set database owner
  shell: |
    sudo -u postgres psql -c "ALTER DATABASE {{ db_name }} OWNER TO {{ db_user }};"
  become: yes

- name: Configure PostgreSQL authentication
  template:
    src: pg_hba.conf.j2
    dest: /etc/postgresql/14/main/pg_hba.conf
    owner: postgres
    group: postgres
    mode: '0640'
    backup: yes
  become: yes
  notify: restart postgresql

- name: Configure PostgreSQL main settings
  template:
    src: postgresql.conf.j2
    dest: /etc/postgresql/14/main/postgresql.conf
    owner: postgres
    group: postgres
    mode: '0644'
    backup: yes
  become: yes
  notify: restart postgresql

- name: Create backup directory
  file:
    path: /var/backups/postgresql
    state: directory
    owner: postgres
    group: postgres
    mode: '0755'
  become: yes

- name: Create backup script
  template:
    src: backup_db.sh.j2
    dest: /usr/local/bin/backup_db.sh
    owner: postgres
    group: postgres
    mode: '0755'
  become: yes

- name: Setup daily database backup cron job
  cron:
    name: "Daily PostgreSQL backup"
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/backup_db.sh"
    user: postgres
  become: yes

- name: Configure log rotation for PostgreSQL
  template:
    src: postgresql.logrotate.j2
    dest: /etc/logrotate.d/postgresql
    owner: root
    group: root
    mode: '0644'
  become: yes